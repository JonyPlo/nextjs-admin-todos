generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A este modelo tambien podemos usarlo como un 'type' para typescript ya que se crea en el cliente de prisma y luego podemos importarlo desde ahi, el type se crea de esta forma:
// type Todo = {
//     id: string;
//     description: string;
//     complete: boolean;
//     createdAt: Date;
//     updatedAt: Date;
// }
model Todo {
  id          String   @id @default(uuid())
  description String
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // De esta forma estoy diciendo que la propiedad 'todos' de los usuarios sera un arreglo de todos que estan en mi base de datos, ahora para saber que todo pertenece a cada usuario hay que crear una relacion entre los modelos y eso es lo que estamos haciendo aqui, estamos haciendo que los todos dependan del user, por lo tanto no se podra crear un todo si no es mediante un usuario.
  // En este caso estamos creando una relacion, en donde el primer argumento 'fields' es el id del todo y el segundo argumento 'references' es el id del usuario que creo ese todo
  user User @relation(fields: [userId], references: [id])

  // En userId almacenamos el id del usuario que esta logueado
  //* Esta es la creadion de la columna 'userId' en la tabla de todos
  userId String
}

// Auth.js
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Aqui estamos agregando al objeto del usuario una propiedad llamada 'todos' en la cual almacenamos los todos relacionados con este usuario
  todos Todo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
